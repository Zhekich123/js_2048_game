{"version":3,"sources":["scripts/main.js"],"names":["cellElement","matrixValue","touchStartX","touchStartY","touchEndX","touchEndY","score","document","querySelector","count","button","isRestart","gameOver","messageStart","messageWin","messageLose","fieldCell","querySelectorAll","cellsChanged","fieldCells","Array","from","numRows","numCols","matrix","row","col","start","randomIndices","classList","toggle","innerHTML","style","fontSize","add","remove","numEmptyCells","length","randomIndex","Math","floor","random","indexOf","push","isGameOver","currentValue","isWinner","moveUp","currentMerge","animatedCells","newRow","Number","addRandomCell","updateUI","moveDown","moveLeft","newCol","mergedValue","moveRight","emptyCells","addEventListener","event","key","preventDefault","touches","clientX","clientY","deltaX","deltaY","abs"],"mappings":"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","file":"main.7c1772d2.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst score = document.querySelector('.game-score');\nlet count = 0;\nconst button = document.querySelector('.button');\nlet isRestart = false;\nlet gameOver = false;\nconst messageStart = document.querySelector('.message-start');\nconst messageWin = document.querySelector('.message-win');\nconst messageLose = document.querySelector('.message-lose');\nconst fieldCell = document.querySelectorAll('.field-cell');\nlet cellElement;\nlet cellsChanged = false;\n\n// #region Creating matrix with all fields\nconst fieldCells\n= Array.from(document.querySelectorAll('.field-row .field-cell'));\nconst numRows = 4;\nconst numCols = 4;\n\nconst matrix = [];\nlet matrixValue;\n\nfor (let row = 0; row < numRows; row++) {\n  matrix[row] = [];\n\n  for (let col = 0; col < numCols; col++) {\n    matrix[row][col] = 0;\n  }\n}\n// console.log(matrix);\n// #endregion\n\n// #region Setting Start and GameOver and Winner functions\nfunction start() {\n  const randomIndices = [];\n\n  button.classList.toggle('restart');\n  messageStart.classList.toggle('hidden');\n\n  if (!isRestart) {\n    button.innerHTML = 'Restart';\n    button.style.fontSize = '18px';\n    messageWin.classList.add('hidden');\n\n    let numEmptyCells = 0;\n\n    for (let row = 0; row < numRows; row++) {\n      for (let col = 0; col < numCols; col++) {\n        if (matrix[row][col] === 0) {\n          numEmptyCells++;\n        }\n      }\n    }\n\n    if (numEmptyCells >= 2) {\n      while (randomIndices.length < 2) {\n        const randomIndex = Math.floor(Math.random() * numRows * numCols);\n\n        if (randomIndices.indexOf(randomIndex) === -1) {\n          randomIndices.push(randomIndex);\n        }\n      }\n\n      for (const randomIndex of randomIndices) {\n        const row = Math.floor(randomIndex / numCols);\n        const col = randomIndex % numCols;\n\n        matrix[row][col] = 2;\n\n        matrixValue = matrix[row][col];\n\n        cellElement = fieldCell[row * numCols + col];\n\n        cellElement.classList.add(`field-cell--${matrixValue}`);\n      }\n    }\n    // console.log(matrix);\n  } else {\n    button.innerHTML = 'Start';\n    button.style.fontSize = '20px';\n    messageLose.classList.add('hidden');\n    messageWin.classList.add('hidden');\n\n    for (let row = 0; row < numRows; row++) {\n      for (let col = 0; col < numCols; col++) {\n        matrix[row][col] = 0;\n\n        cellElement = fieldCell[row * numCols + col];\n\n        cellElement.classList.remove('field-cell--2',\n          'field-cell--4',\n          'field-cell--8',\n          'field-cell--16',\n          'field-cell--32',\n          'field-cell--64',\n          'field-cell--128',\n          'field-cell--256',\n          'field-cell--512',\n          'field-cell--1024',\n          'field-cell--2048'\n        );\n      }\n    }\n  }\n\n  isRestart = !isRestart;\n  count = 0;\n  score.innerHTML = count;\n}\n\nbutton.addEventListener('click', start);\n\nfunction isGameOver() {\n  for (let row = 0; row < numRows; row++) {\n    for (let col = 0; col < numCols; col++) {\n      const currentValue = matrix[row][col];\n\n      if (currentValue === 0) {\n        return false;\n      }\n\n      if (\n        (row < numRows - 1 && matrix[row + 1][col] === currentValue)\n        || (col < numCols - 1 && matrix[row][col + 1] === currentValue)\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\nfunction isWinner() {\n  const has2048Cell = document.querySelector('.field-cell--2048');\n\n  if (has2048Cell) {\n    messageWin.classList.remove('hidden');\n    gameOver = true;\n  }\n\n  return gameOver;\n}\n\n// #endregion\n\n// #region key functions\nfunction moveUp() {\n  let currentMerge = 0;\n  const animatedCells = [];\n\n  if (gameOver) {\n    return;\n  }\n\n  if (isWinner()) {\n    return;\n  }\n\n  for (let col = 0; col < numCols; col++) {\n    for (let row = 1; row < numRows; row++) {\n      const currentValue = matrix[row][col];\n\n      if (currentValue !== 0) {\n        let newRow = row - 1;\n\n        while (newRow >= 0 && (matrix[newRow][col] === 0 || matrix[newRow][col] === currentValue)) {\n          if (matrix[newRow][col] === currentValue) {\n            matrix[newRow][col] *= 2;\n            matrix[row][col] = 0;\n            cellsChanged = true;\n\n            const mergedValue = matrix[newRow][col];\n\n            currentMerge += mergedValue;\n          } else {\n            matrix[newRow][col] = currentValue;\n            matrix[row][col] = 0;\n            cellsChanged = true;\n          }\n\n          row = newRow;\n          newRow--;\n\n          animatedCells.push({ row, col });\n        }\n      }\n    }\n  }\n\n  score.innerHTML = Number(score.innerHTML) + currentMerge;\n\n  isWinner();\n\n  if (cellsChanged) {\n    addRandomCell();\n  }\n\n  updateUI();\n\n  if (isGameOver()) {\n    messageLose.classList.remove('hidden');\n    gameOver = true;\n  }\n}\n\nfunction moveDown() {\n  let currentMerge = 0;\n\n  if (gameOver) {\n    return;\n  }\n\n  for (let col = 0; col < numCols; col++) {\n    for (let row = numRows - 2; row >= 0; row--) {\n      const currentValue = matrix[row][col];\n\n      if (currentValue !== 0) {\n        let newRow = row + 1;\n\n        while (newRow < numRows && matrix[newRow][col] === 0) {\n          matrix[newRow][col] = currentValue;\n          matrix[row][col] = 0;\n          row = newRow;\n          newRow++;\n          cellsChanged = true;\n        }\n\n        if (newRow < numRows && matrix[newRow][col] === currentValue) {\n          matrix[newRow][col] *= 2;\n          matrix[row][col] = 0;\n          cellsChanged = true;\n\n          const mergedValue = matrix[newRow][col];\n\n          currentMerge += mergedValue;\n        }\n      }\n    }\n  }\n  score.innerHTML = Number(score.innerHTML) + currentMerge;\n  isWinner();\n\n  if (cellsChanged) {\n    addRandomCell();\n  }\n  updateUI();\n\n  if (isGameOver()) {\n    messageLose.classList.remove('hidden');\n    gameOver = true;\n  }\n}\n\nfunction moveLeft() {\n  let currentMerge = 0;\n\n  for (let row = 0; row < numRows; row++) {\n    for (let col = 1; col < numCols; col++) {\n      const currentValue = matrix[row][col];\n\n      if (currentValue !== 0) {\n        let newCol = col - 1;\n\n        while (newCol >= 0 && matrix[row][newCol] === 0) {\n          matrix[row][newCol] = currentValue;\n          matrix[row][col] = 0;\n          col = newCol;\n          newCol--;\n          cellsChanged = true;\n        }\n\n        if (newCol >= 0 && matrix[row][newCol] === currentValue) {\n          matrix[row][newCol] *= 2;\n\n          const mergedValue = matrix[row][newCol];\n\n          matrix[row][col] = 0;\n          cellsChanged = true;\n\n          currentMerge += mergedValue;\n        }\n      }\n    }\n  }\n  score.innerHTML = Number(score.innerHTML) + currentMerge;\n\n  isWinner();\n\n  if (cellsChanged) {\n    addRandomCell();\n  }\n  updateUI();\n\n  if (isGameOver()) {\n    messageLose.classList.remove('hidden');\n    gameOver = true;\n  }\n}\n\nfunction moveRight() {\n  let currentMerge = 0;\n\n  if (gameOver) {\n    return;\n  }\n\n  for (let row = 0; row < numRows; row++) {\n    for (let col = numCols - 2; col >= 0; col--) {\n      const currentValue = matrix[row][col];\n\n      if (currentValue !== 0) {\n        let newCol = col + 1;\n\n        while (newCol < numCols && matrix[row][newCol] === 0) {\n          matrix[row][newCol] = currentValue;\n          matrix[row][col] = 0;\n          col = newCol;\n          newCol++;\n          cellsChanged = true;\n        }\n\n        if (newCol < numCols && matrix[row][newCol] === currentValue) {\n          matrix[row][newCol] *= 2;\n\n          const mergedValue = matrix[row][newCol];\n\n          matrix[row][col] = 0;\n          cellsChanged = true;\n\n          currentMerge += mergedValue;\n        }\n      }\n    }\n  }\n  score.innerHTML = Number(score.innerHTML) + currentMerge;\n  isWinner();\n\n  if (cellsChanged) {\n    addRandomCell();\n  }\n  updateUI();\n\n  if (isGameOver()) {\n    messageLose.classList.remove('hidden');\n    gameOver = true;\n  }\n}\n\nfunction addRandomCell() {\n  const emptyCells = [];\n\n  for (let row = 0; row < numRows; row++) {\n    for (let col = 0; col < numCols; col++) {\n      if (matrix[row][col] === 0) {\n        emptyCells.push({ row, col });\n      }\n    }\n  }\n\n  if (emptyCells.length > 0) {\n    const randomIndex = Math.floor(Math.random() * emptyCells.length);\n    const { row, col } = emptyCells[randomIndex];\n\n    matrix[row][col] = 2;\n  }\n}\n\nfunction updateUI() {\n  for (let row = 0; row < numRows; row++) {\n    for (let col = 0; col < numCols; col++) {\n      cellElement = fieldCells[row * numCols + col];\n      matrixValue = matrix[row][col];\n\n      cellElement.classList.remove('field-cell--2',\n        'field-cell--4',\n        'field-cell--8',\n        'field-cell--16',\n        'field-cell--32',\n        'field-cell--64',\n        'field-cell--128',\n        'field-cell--256',\n        'field-cell--512',\n        'field-cell--1024'\n      );\n\n      if (matrixValue > 0) {\n        cellElement.classList.add(`field-cell--${matrixValue}`);\n      }\n    }\n  }\n}\n\n// #endregion\n\n// #region Setting key logic\nlet touchStartX, touchStartY, touchEndX, touchEndY;\n\ndocument.addEventListener('keydown', function(event) {\n  if (event.key === 'ArrowUp' && isRestart) {\n    event.preventDefault();\n    moveUp();\n  } else if (event.key === 'ArrowDown' && isRestart) {\n    event.preventDefault();\n    moveDown();\n  } else if (event.key === 'ArrowLeft' && isRestart) {\n    event.preventDefault();\n    moveLeft();\n  } else if (event.key === 'ArrowRight' && isRestart) {\n    event.preventDefault();\n    moveRight();\n  }\n});\n\ndocument.addEventListener('touchstart', function(event) {\n  touchStartX = event.touches[0].clientX;\n  touchStartY = event.touches[0].clientY;\n});\n\ndocument.addEventListener('touchmove', function(event) {\n  event.preventDefault();\n  touchEndX = event.touches[0].clientX;\n  touchEndY = event.touches[0].clientY;\n});\n\ndocument.addEventListener('touchend', function(event) {\n  const deltaX = touchEndX - touchStartX;\n  const deltaY = touchEndY - touchStartY;\n\n  if (Math.abs(deltaX) > Math.abs(deltaY)) {\n    if (deltaX > 0 && isRestart) {\n      moveRight();\n    } else if (deltaX < 0 && isRestart) {\n      moveLeft();\n    }\n  } else {\n    if (deltaY > 0 && isRestart) {\n      moveDown();\n    } else if (deltaY < 0 && isRestart) {\n      moveUp();\n    }\n  }\n});\n// #endregion\n"]}